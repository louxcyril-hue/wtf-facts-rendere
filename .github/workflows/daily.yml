name: Daily WTF Facts Video

on:
  workflow_dispatch:   # Permet lancement manuel
  schedule:
    - cron: '0 8 * * *' # Tous les jours à 8h UTC

jobs:
  build-video:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests

      - name: Run orchestrator (with retry)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
          RENDER_URL: ${{ secrets.RENDER_URL }}
        run: |
          python - <<'PY'
          import os, json, base64, time, random, requests

          OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
          ELEVENLABS_API_KEY = os.environ["ELEVENLABS_API_KEY"]
          ELEVENLABS_VOICE_ID = os.environ["ELEVENLABS_VOICE_ID"]
          RENDER_URL = os.environ["RENDER_URL"].rstrip("/")

          def request_with_retry(method, url, **kwargs):
              for attempt in range(5):
                  r = requests.request(method, url, timeout=120, **kwargs)
                  if r.status_code < 400:
                      return r
                  if r.status_code in (429, 500, 502, 503, 504):
                      wait = (2 ** attempt) + random.uniform(0, 0.5)
                      print(f"⚠️ API limit, retry dans {wait:.1f}s...")
                      time.sleep(wait)
                      continue
                  r.raise_for_status()
              r.raise_for_status()

          def openai_chat():
              url = "https://api.openai.com/v1/chat/completions"
              headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
              sys = "Tu écris des scripts FR de 60s (hook ≤ 8 mots, phrases courtes). Réponds en JSON strict."
              usr = (
                  "Génère une vidéo 'WTF Facts' 60s. Réponds EXACTEMENT avec : "
                  "{ \"title\":\"...\", \"hashtags\":[\"#...\",\"#...\"], \"script\": { "
                  "\"hook\":\"...\", \"body\":[\"...\",\"...\",\"...\"], \"twist\":\"...\", "
                  "\"cta\":\"Abonne-toi pour en savoir plus !\" }, "
                  "\"image_prompts\":[\"Ultra detailed cinematic image of ... (9:16)\",\"... (9:16)\",\"... (9:16)\",\"... (9:16)\"] } "
                  "Contrainte: 115–140 mots (hors CTA). Sujet fascinant grand public, safe."
              )
              data = {
                  "model": "gpt-4o-mini",
                  "response_format": {"type": "json_object"},
                  "messages": [{"role": "system", "content": sys}, {"role": "user", "content": usr}]
              }
              r = request_with_retry("POST", url, headers=headers, json=data)
              return json.loads(r.json()["choices"][0]["message"]["content"])

          def openai_images(prompts):
              url = "https://api.openai.com/v1/images/generations"
              headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
              data = {
                  "model": "gpt-image-1",
                  "prompt": prompts[0],  # on peut aussi fusionner tous les prompts en un seul
                  "n": 4,
                  "size": "1024x1792"
              }
              r = request_with_retry("POST", url, headers=headers, json=data)
              return [item["b64_json"] for item in r.json()["data"]]

          def elevenlabs_tts(text):
              url = f"https://api.elevenlabs.io/v1/text-to-speech/{ELEVENLABS_VOICE_ID}"
              headers = {"xi-api-key": ELEVENLABS_API_KEY, "Accept": "audio/mpeg", "Content-Type": "application/json"}
              payload = { "text": text, "voice_settings": { "stability": 0.4, "similarity_boost": 0.6 } }
              r = request_with_retry("POST", url, headers=headers, json=payload)
              return base64.b64encode(r.content).decode("utf-8")

          print("→ Génération du script…")
          pack = openai_chat()
          title = pack["title"]
          hook = pack["script"]["hook"]
          bodyL = pack["script"]["body"]
          twist = pack["script"]["twist"]
          cta = pack["script"]["cta"]
          full_text = " ".join([hook] + bodyL + [twist, cta])

          print("→ Génération des images (1 appel)…")
          images_b64 = openai_images(pack["image_prompts"])

          print("→ Génération de la voix…")
          voice_b64 = elevenlabs_tts(full_text)

          payload = {
              "title": title,
              "script": {"hook": hook, "body": bodyL, "twist": twist, "cta": cta},
              "image_b64": images_b64,
              "voice_b64": voice_b64,
              "watermark_text": "WTF Facts • @toncompte",
              "return_url": None
          }

          print("→ Envoi au service Render…")
          r = request_with_retry("POST", f"{RENDER_URL}/render", json=payload)
          print("✅ Vidéo générée :", r.json())
          PY
